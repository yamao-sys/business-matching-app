// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package companies

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// CompanySignUpValidationError defines model for CompanySignUpValidationError.
type CompanySignUpValidationError struct {
	Email    *[]string `json:"email,omitempty"`
	Name     *[]string `json:"name,omitempty"`
	Password *[]string `json:"password,omitempty"`
	Tel      *[]string `json:"tel,omitempty"`
}

// CompanySignUpResponse defines model for CompanySignUpResponse.
type CompanySignUpResponse struct {
	Code   int64                        `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// CompanySignUpInput defines model for CompanySignUpInput.
type CompanySignUpInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Tel      string `json:"tel"`
}

// PostAuthSignUpJSONBody defines parameters for PostAuthSignUp.
type PostAuthSignUpJSONBody struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Tel      string `json:"tel"`
}

// PostAuthValidateSignUpJSONBody defines parameters for PostAuthValidateSignUp.
type PostAuthValidateSignUpJSONBody struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Tel      string `json:"tel"`
}

// PostAuthSignUpJSONRequestBody defines body for PostAuthSignUp for application/json ContentType.
type PostAuthSignUpJSONRequestBody PostAuthSignUpJSONBody

// PostAuthValidateSignUpJSONRequestBody defines body for PostAuthValidateSignUp for application/json ContentType.
type PostAuthValidateSignUpJSONRequestBody PostAuthValidateSignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Company SignUp
	// (POST /companies/signUp)
	PostAuthSignUp(ctx echo.Context) error
	// Company Validate SignUp
	// (POST /companies/validateSignUp)
	PostAuthValidateSignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthSignUp(ctx)
	return err
}

// PostAuthValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthValidateSignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/companies/signUp", wrapper.PostAuthSignUp)
	router.POST(baseURL+"/companies/validateSignUp", wrapper.PostAuthValidateSignUp)

}

type CompanySignUpResponseJSONResponse struct {
	Code   int64                        `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

type InternalServerErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type PostAuthSignUpRequestObject struct {
	Body *PostAuthSignUpJSONRequestBody
}

type PostAuthSignUpResponseObject interface {
	VisitPostAuthSignUpResponse(w http.ResponseWriter) error
}

type PostAuthSignUp200JSONResponse struct {
	CompanySignUpResponseJSONResponse
}

func (response PostAuthSignUp200JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignUp400JSONResponse struct {
	Code   int64                        `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

func (response PostAuthSignUp400JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostAuthSignUp500JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUpRequestObject struct {
	Body *PostAuthValidateSignUpJSONRequestBody
}

type PostAuthValidateSignUpResponseObject interface {
	VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error
}

type PostAuthValidateSignUp200JSONResponse struct {
	CompanySignUpResponseJSONResponse
}

func (response PostAuthValidateSignUp200JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUp400JSONResponse struct {
	Code   int64                        `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

func (response PostAuthValidateSignUp400JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostAuthValidateSignUp500JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Company SignUp
	// (POST /companies/signUp)
	PostAuthSignUp(ctx context.Context, request PostAuthSignUpRequestObject) (PostAuthSignUpResponseObject, error)
	// Company Validate SignUp
	// (POST /companies/validateSignUp)
	PostAuthValidateSignUp(ctx context.Context, request PostAuthValidateSignUpRequestObject) (PostAuthValidateSignUpResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthSignUp operation middleware
func (sh *strictHandler) PostAuthSignUp(ctx echo.Context) error {
	var request PostAuthSignUpRequestObject

	var body PostAuthSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthSignUp(ctx.Request().Context(), request.(PostAuthSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthSignUpResponseObject); ok {
		return validResponse.VisitPostAuthSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthValidateSignUp operation middleware
func (sh *strictHandler) PostAuthValidateSignUp(ctx echo.Context) error {
	var request PostAuthValidateSignUpRequestObject

	var body PostAuthValidateSignUpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthValidateSignUp(ctx.Request().Context(), request.(PostAuthValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthValidateSignUpResponseObject); ok {
		return validResponse.VisitPostAuthValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
